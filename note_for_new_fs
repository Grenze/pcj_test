1.for nvm, every param type of File or Path should:
    convert to File.getCanonicalPath()[unique for ObjectDirectory]

2.getName() and getParentFile() supported by java.io.File

3.for every directory, it should also keep its sub's local name(String) in its String
    to index them

4.no idea about the actual type before you get the file or directory out of ObjectDirectory
    so File and Directory the same class with boolean isFile and isDirectory, isEmpty



5.ObjectDirectory.put(id1, class) and put(id2, class) then id1 and id2 refer to the same class
    if ObjectDirectory.remove(id1, class), then ObjectDirectory.get(id2, class) can get it

6.ObjectDirectory.put(id1, class1) and put(id1, class2(same class type as class1))
    then class1 garbage collected

7.ObjectDirectory.get(id, class)==null

8.rename operation of a directory or file can be done like this(its parent/ itself/ its child):

    String oldParentDirectoryString = oldFileName.getParentFile().toString();
    ObjectDirectory.get(oldParentDirectoryString).childHashSet().remove(oldFileName.getName());
    //String newParentDirectoryString = newFileName.getParentFile().toString();//exist?
    nvmMkdirs(newFileName.getParentFile());//whatever create it or prove it
    String newParentDirectoryString = newFileName.getParentFile().toString();
    ObjectDirectory.get(newParentDirectoryString).childHashSet().add(newFileName.getName());

    String oldFileNameString = oldFileName.toString();
    String newFileNameString = newFileName.toString();
    ObjectDirectory.put(newFileNameString, ObjectDirectory.remove(oldFileNameString));
    //to travel every layer underneath
    //ObjectDirectory should support get method
    for (String key: globalID.keySet()){
        if(key.startWith(oldFileNameString)){
            ObjectDirectory.put(newFileNameString+key.substring(oldFileNameString.length()), ObjectDirectory.remove(key));
        }
    }

9.delete operation of a directory or file:

    String oldParentDirectoryString = oldFileName.getParentFile().toString();
    ObjectDirectory.get(oldParentDirectoryString).childHashSet().remove(oldFileName.getName());

    String oldFileNameString = oldFileName.toString();
    ObjectDirectory.remove(oldFileNameString);

    for (String key: globalID.keySet()){
        if(key.startWith(oldFileNameString)){
            ObjectDirectory.remove(key);
        }
    }

10.nvmMkdirs(File file, isFile, is Directory)
        nvmMkFilDir false,return;true forward
        //nvmMkFilDir(File, isFile, isDirectory);
        File parentFile = file.getParentFile();
        if(ObjectDirectory.get(parentFile.toString())==null){
            nvmMkdirs(parentFile, false, true);
        }
        ObjectDirectory.get(parentFile.toString(), nvmFilDir.class()).childHashSet().add(file.getName());


    nvmMkFilDir(File f, isFile, isDirectory)
        file.exist,return true
        nvmFilDir nFD = new nvmFilDir(file, isFile, isDirectory);
        ObjectDirectory.put(f.toString(), nvmFilDir);//constructor to connect dir with its index

11.use String/ to store the child FilDir in class

12.copy method new FilDir constructor(FilDirOut) this.param=FilDirOut.param

13.add this method to copyRecursively() as set to iterate
static Set<String> listWithFilter(FileFilter filter, String fromDirectory){
    Set<String> temp = new Set<String>;
    for (String key: globalID.keySet()){
        if(key.startWith(fromDirectory) && filter.accept(new File(key))){
            temp.add(key);
        }
    }
    return temp;
}

14.add this method to DefaultFileSystemAbstraction's listFiles with filter:
static Set<String> listWithFilter(FileFilter filter, String fromDirectory){
    Set<String> temp = new Set<String>;
    for (String key: globalID.keySet()){
        if(key.startWith(fromDirectory) && filter.accept(new File(key), key)){
            temp.add(key);
        }
    }
    return temp;
}

15.copyRecursively used not always, listFiles() often used, so keep the FilDirIndex

16.public class nvmFileChannel implements StoreChannel{
    private final nvmFileChannel nvmChannel;
    private final File nvmFile;
    private long position;
    public nvmFileChannel(File file){this.nvmFile = file;}
    public nvmFileChannel(nvmFileChannel nvmChannel){this.nvmChannel = nvmChannel;}

    public int write/read/truncate/size(ByteBuffer src) throws IOException
    {
        operation on the nvmFile's content nvmString;
    }
    public position(long newPosition) throws IOException
    {
        this.position = newPosition;
        return channel.position();
    }
    public FileLock tryLock() throws IOException
    {

    }
    public void close()/force()/flush()/isOpen() throws IOException
    {
       ???
    }
}

17.//parent itself child
   private static void renameNvmFilDir(File src, File dst) throws IOException {
       NvmFilDir.getNvmFilDir(src.getParentFile()).decreaseLocalIndex(src);
       nvmMkDirs(dst.getParentFile(), false, true);
       NvmFilDir.getNvmFilDir(dst.getParentFile()).increaseLocalIndex(src);

       NvmFilDir srcFilDir = NvmFilDir.getNvmFilDir(src);
       srcFilDir.renameNvmFilDir(src, dst);//index changed from src to dst, inner globalId changed too

       if(NvmFilDir.isFile(dst) || NvmFilDir.isEmpty(dst)){
           return;
       }
       for(String key: NvmFilDir.getNvmFilDirDirectory()){
           if(key.startsWith(src.getCanonicalPath())){
               NvmFilDir subFilDir = NvmFilDir.removeNvmFilDir(new File(key));
               subFilDir.renameNvmFilDir(new File(key), new File(dst, key.substring(src.getCanonicalPath().length())));
           }
       }
   }


18.getCanonicalFile().getParentFile() in order or you will get nullPoint

19.truncate no effect to position

20.new a channel open a file(if not exist)


21.new File("/.......") illegal parameter for mkdirs


22.delete(allowed) move(allowed solved) file while channel point to it

23.FileUtils.copyDirectory used in AbstractInProcessServerBuilder

24.now remained problem:
   a. :DefaultFileSystemAbstraction
        openAsInputStream(to be supported by FileUtils
        openAsOutputStream(to be supported by FileUtils
        openAsReader
        openAsWriter

   b. :DelegateFileSystemAbstraction
        FileUtils.openAsInputStream
        FileUtils.openAsOutputStream
        openAsReader
        openAsWriter

   c. :FileUtils
        1.openAsInputStream
        2.openAsOutputStream


        Fin***3.newBufferedFileReader (used in StartClient.java,
                BufferedReader.readLine())

        Fin***4.newBufferedWriter(used in AnnotationProcessor.java,
                PrintWriter.append("..."))


   a,b->FileSystemAbstraction

   1.openAsOutputStream return OutputStream
     in PartitionedIndexStorage.java archiveFile to return ZipOutputStream(only putNextEntry in project)
   2.Files.java to return OutputStream
   3.KeyValueWriter.java to support OutputStream to StreamWriter and OpeningStreamWriter
   4.ImportTool.java support OutputStream
        ----almost support OutputStream to them, so reconstruct it


   ........5.no thing special about openAsInputStream, just used in IO module


   ***6.openAsReader in StoreMigrator.java MigrationStatus.java to support BufferedReader.readLine() return String

   ***7.openAsWriter in StoreMigrator.java MigrationStatus.java to support Writer.write(String) Writer.write(int('\n')) Writer.flush()









25. design without consider origin project's test


26.string byte[] convert in NvmFilDir, check every corner about data

27.base64 encoded String not allowed any operation XXXXXX

28.the left work:
    1.use byteBuffer to replace String
    2.file lock
    3.the left index and etc
    4.a new branch for nvm_neo4j
    5.pom pcj relative path






